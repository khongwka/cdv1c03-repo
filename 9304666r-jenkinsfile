pipeline {
    agent {
        label 'master'
    }
    
    tools {
        maven 'maven3'
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '15', numToKeepStr: '10'))
    }

    environment {
        APP_NAME = "STUDENT_APP"
        APP_ENV = "DEV"
        RELEASE_ENV = "ST1-9304666r"
        ST2_ENV = "ST2-9304666r"
        CONTAINER_NAME = "server1-9304666r"
        IMAGE_NAME = "svr-image-9304666r"
        HOST_PORT = "32700"
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                cleanWs()
                sh "echo 'Cleaned Up Workspace for ${APP_NAME}'"
            }
        }
        
        stage('Code Checkout') {
            steps {
                git branch: 'main', 
                   url: 'https://github.com/khongwka/cdv1c03-repo.git'
            }
        }

        stage('Code Build') {
            steps {
                sh 'mvn install -Dmaven.test.skip=false'
            }
        }

        stage('Setup Release Environment') {
            steps {
                script {
                    sh """
                    echo "Creating release environment: ${RELEASE_ENV}"
                    """
                }
                echo "Setup Release Environment Completed."
            }
        }

        stage('ST2-9304666r') {
            agent {
                docker {
                    image 'docker:dind'
                    args '--privileged -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                script {
                    sh """
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true
                    docker run -d --name ${CONTAINER_NAME} -p ${HOST_PORT}:80 ${IMAGE_NAME}
                    """
                    echo "${ST2_ENV}: Server1 is successfully created"
                }
            }
        }

        stage('Verify Container') {
            steps {
                sh """
                echo "Container status:"
                docker inspect ${CONTAINER_NAME} --format='{{.State.Status}}'
                echo "Apache response:"
                curl -sI http://localhost:${HOST_PORT} | head -1
                """
            }
        }

        stage('Printing All Global Variables') {
            steps {
                sh 'env'
            }
        }
    }
}
